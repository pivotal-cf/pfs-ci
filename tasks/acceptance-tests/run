#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

echo "System Tests for riff"

build_root=$(pwd)

source "$build_root/git-pfs-ci/tasks/scripts/common.sh"
init_docker
init_kubeconfig

RIFF_NAME=$(head "$build_root/gcs-riff-chart-latest-name/latest_name")
RIFF_VERSION=$(head "$build_root/gcs-riff-chart-latest-version/latest_version")

JAVA_INVOKER_VERSION=$(head "$build_root/java-function-invoker-version/version")
NODE_INVOKER_VERSION=$(head "$build_root/node-function-invoker-version/version")
PYTHON2_INVOKER_VERSION=$(head "$build_root/python2-function-invoker-version/version")
SHELL_INVOKER_VERSION=$(head "$build_root/shell-function-invoker-version/version")

existing_riff_ns=$(find_existing_riff_ns "$RIFF_NAME" "$RIFF_VERSION")

current_kubeconfig_context="$(kubectl config current-context)"

if [ "minikube" == "${current_kubeconfig_context}" ]; then
  http_gw_host=$(basename $(kubectl config view | grep 'server:' | awk '{print $2}') | cut -d':' -f1)
  http_gw_port=$(kubectl -n "$existing_riff_ns" get svc -l component=http-gateway -o jsonpath='{.items[0].spec.ports[?(@.name == "http")].nodePort}')
else
  http_gw_host=$(kubectl -n "$existing_riff_ns" get svc -l component=http-gateway -o jsonpath='{.items[0].status.loadBalancer.ingress[].ip}')
  http_gw_port=$(kubectl -n "$existing_riff_ns" get svc -l component=http-gateway -o jsonpath='{.items[0].spec.ports[?(@.name == "http")].port}')
fi

kafka_pod=$(kubectl -n 'riff-system'  get pod -l component=kafka-broker -o jsonpath='{.items[0].metadata.name}')
echo "Using kafka: $kafka_pod"

# init test env vars

export SYS_TEST_JAVA_INVOKER_VERSION="$JAVA_INVOKER_VERSION"
export SYS_TEST_NODE_INVOKER_VERSION="$NODE_INVOKER_VERSION"
export SYS_TEST_PYTHON2_INVOKER_VERSION="$PYTHON2_INVOKER_VERSION"
export SYS_TEST_SHELL_INVOKER_VERSION="$SHELL_INVOKER_VERSION"
export SYS_TEST_NS="$existing_riff_ns"
export SYS_TEST_HTTP_GW_URL="http://${http_gw_host}:${http_gw_port}"
export SYS_TEST_KAFKA_POD_NAME="$kafka_pod"
export SYS_TEST_DOCKER_ORG="$DOCKER_TEST_ORG"
export SYS_TEST_DOCKER_USERNAME="$DOCKER_USERNAME"
export SYS_TEST_DOCKER_PASSWORD="$DOCKER_PASSWORD"
export SYS_TEST_BASE_DIR="$build_root/git-riff"
export SYS_TEST_MSG_RT_TIMEOUT_SEC=120
export SYS_RIFF_NS="riff-system"

export GOPATH=$(go env GOPATH)
workdir=$GOPATH/src/github.com/pivotal-cf
mkdir -p $workdir
cp -rf git-pfs-system-test $workdir/pfs-system-test
cd $workdir/pfs-system-test
dep ensure

set +e
./test.sh
test_retcode="$?"
set -e

if [ "0" != "$test_retcode" ]; then
  echo "Tests Failed. Listing all service and pods in [$existing_riff_ns]"

  kubectl get svc -n "$existing_riff_ns" --show-labels
  
  kubectl get pods -n "$existing_riff_ns" --show-labels

  # echo "Tests Failed. Printing logs from all pods in [$existing_riff_ns]"
  #
  # set +e
  # kubectl get pods -n "$existing_riff_ns" -o jsonpath='{.items[*].metadata.name}' | tr ' ' '\n' | xargs -I{} kubectl logs {} -n "$existing_riff_ns"
  # logsretcode=$?
  # set -e
  #
  # if [ "$logsretcode" != "0" ]; then
  #   kubectl get pods -n "$existing_riff_ns" -o jsonpath='{.items[*].metadata.name}' | tr ' ' '\n' | grep -v riff | xargs -I{} kubectl -n "$existing_riff_ns" logs {} sidecar
  #   kubectl get pods -n "$existing_riff_ns" -o jsonpath='{.items[*].metadata.name}' | tr ' ' '\n' | grep -v riff | xargs -I{} kubectl -n "$existing_riff_ns" logs {} main
  # fi
fi

exit $test_retcode
